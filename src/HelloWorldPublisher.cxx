// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorldPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/publisher/Publisher.h>
#include <fastrtps/attributes/PublisherAttributes.h>

#include <fastrtps/Domain.h>

#include <fastrtps/utils/eClock.h>

#include "HelloWorldPublisher.h"

#include "serial.h"

#define SERIAL_PORT  "/dev/ttyACM0"
#define SERIAL_BAUD 115200

HelloWorldPublisher::HelloWorldPublisher() : mp_participant(nullptr), mp_publisher(nullptr) {}

HelloWorldPublisher::~HelloWorldPublisher() {	Domain::removeParticipant(mp_participant);}

bool HelloWorldPublisher::init()
{
	// Create RTPSParticipant

	ParticipantAttributes PParam;
	PParam.rtps.builtin.domainId = 0;
	PParam.rtps.builtin.leaseDuration = c_TimeInfinite;
	PParam.rtps.setName("Participant_publisher");  //You can put here the name you want
	mp_participant = Domain::createParticipant(PParam);
	if(mp_participant == nullptr)
		return false;

	//Register the type

	Domain::registerType(mp_participant,(TopicDataType*) &myType);

	// Create Publisher

	PublisherAttributes Wparam;
	Wparam.topic.topicKind = NO_KEY;
	Wparam.topic.topicDataType = myType.getName();  //This type MUST be registered
	Wparam.topic.topicName = "HelloWorldPubSubTopic";
	mp_publisher = Domain::createPublisher(mp_participant,Wparam,(PublisherListener*)&m_listener);
	if(mp_publisher == nullptr)
		return false;
	cout << "Publisher created, waiting for Subscribers." << endl;
	return true;
}

void HelloWorldPublisher::PubListener::onPublicationMatched(Publisher* pub,MatchingInfo& info)
{
	if (info.status == MATCHED_MATCHING)
	{
		n_matched++;
		cout << "Publisher matched" << endl;
	}
	else
	{
		n_matched--;
		cout << "Publisher unmatched" << endl;
	}
}

void HelloWorldPublisher::run()
{
	while(m_listener.n_matched == 0)
	{
		eClock::my_sleep(250); // Sleep 250 ms
	}

	// Publication code

	HelloWorld st;

	/* Initialize your structure here */

	// int msgsent = 0;
	// char ch = 'y';
	// do
	// {
	// 	if(ch == 'y')
	// 	{
	// 		mp_publisher->write(&st);  ++msgsent;
	// 		cout << "Sending sample, count=" << msgsent << ", send another sample?(y-yes,n-stop): ";
	// 	}
	// 	else if(ch == 'n')
	// 	{
	// 		cout << "Stopping execution " << endl;
	// 		break;
	// 	}
	// 	else
	// 	{
	// 		cout << "Command " << ch << " not recognized, please enter \"y/n\":";
	// 	}
	// }while(std::cin >> ch);

	//define serial port to use
	std::string port(SERIAL_PORT);
	//define baud rate to use
	unsigned long baud = SERIAL_BAUD;

	serial::Serial my_serial(port, baud, serial::Timeout::simpleTimeout(10));
	while(true){
		//tell the micro-controller you want to grab the data
 		my_serial.write("+");

	 	//parse the data sent from the micro-controller
	 	std::string parsed_data = my_serial.readline();

		//just some debugging prints
		cout << "Parsed Data: " << parsed_data << " , " << "publishing now" << endl;

		//pass the parsed data to the message object
		st.msg(parsed_data);

		//publish
		mp_publisher->write(&st);

		// Sleep 250 ms
		eClock::my_sleep(250);
	}
}
